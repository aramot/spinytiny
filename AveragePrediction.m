function AveragePrediction(varargin)

animalnames = varargin;
lookforfiles = cellfun(@(x) strcat(x, '_PredictionModel'), animalnames, 'uni', false);

pathchoice = 'C:\Users\Komiyama\Desktop\Output Data';
cd(pathchoice)

for i = 1:length(lookforfiles)
    files(i) = fastdir(pathchoice,lookforfiles{i});
end

for i = 1:length(files)
    load(files{i});
end

figure; hold on;

allarray = nan(length(files), 14);

for i = 1:length(files)
    eval(['usedsessions = find(~cell2mat(cellfun(@isempty,' files{i}(1:end-4), ',''uni'', false)));'])
    sessionstr = cell2mat(cellfun(@(x) strcat(x, ','), strsplit(num2str(usedsessions)), 'uni', false));
    eval(['allarray(i,[',sessionstr(1:end-1),']) = cell2mat(cellfun(@(x) x(:).PredictionAccuracy,',files{i}(1:end-4), '(~cell2mat(cellfun(@isempty,',files{i}(1:end-4),', ''uni'', false))), ''uni'', false));'])
end

considersessions = ones(1,14);
considersessions([4,9,14]) = 0;
considersessions = logical(considersessions);
sessions = 1:14; sessions = sessions(:,considersessions);

plot(sessions, allarray(:,considersessions)'); flex_plot(sessions, allarray(:,considersessions), 'nonparametric', 'k', 2);
ylabel('Prediction Accuray (R^2)')
xlabel('Session')
xlim([0 15])


%%%%% Update the file ('LongitudinalSpineTypeSummary') as more data is
%%%%% added; this file is automatically generated from the
%%%%% TrialActivityAnalysis code, and can be saved after running said code
%%%%% with the same animals used here

load('LongitudinalSpineTypeSummary')
ClusteredSpinesBeta = cell(1,14);
NonClusteredSpineBeta = cell(1,14);
MovementSpinesBeta = cell(1,14);
NonMovementSpineBeta = cell(1,14);
for filenum = 1:length(files)
    eval(['currentfile = ', files{filenum}(1:end-4)])
    for session = 1:length(currentfile)
        if ~isempty(currentfile{session})
            ClusteredSpinesBeta{session} = [ClusteredSpinesBeta{session}; currentfile{session}.Model.Beta(features.ClusteredSpinesbyAnimal{session}{filenum})];
            NonClusteredSpineBeta{session} = [NonClusteredSpineBeta{session}; currentfile{session}.Model.Beta(find(~ismember([1:size(currentfile{session}.Model.Beta,1)], features.ClusteredSpinesbyAnimal{session}{filenum}))')];
            MovementSpinesBeta{session} = [MovementSpinesBeta{session}; currentfile{session}.Model.Beta(features.StatSpinesbyAnimal{session}{filenum})];
            NonMovementSpineBeta{session} = [NonMovementSpineBeta{session}; currentfile{session}.Model.Beta(find(~ismember([1:size(currentfile{session}.Model.Beta,1)], features.StatSpinesbyAnimal{session}{filenum}))')];
        end
    end
end

figure; 
subplot(1,2,1);
a = flex_plot(sessions, ClusteredSpinesBeta(:,considersessions),'parametric', 'k', 2);
b = flex_plot(sessions, NonClusteredSpineBeta(:,considersessions), 'parametric', 'r', 2);
legend([a,b], 'Clustered Spines', 'Nonclustered Spines')
xlabel('Session')
ylabel('Mean Coefficients')
title('Betas for Clustered Spines')
subplot(1,2,2);
a = flex_plot(sessions, MovementSpinesBeta(:,considersessions),'parametric', 'k', 2);
b = flex_plot(sessions, NonMovementSpineBeta(:,considersessions), 'parametric', 'r', 2);
legend([a,b], 'Movement Spines', 'Nonclustered Spines')
xlabel('Session')
ylabel('Mean Coefficients')
title('Betas for Movement Spines')



