function SpilloverAveraging(varargin)

for file = 1:length(varargin)
    DistanceCovered(1,file) = size(varargin{file}.MedianDistanceResponse,2);
    NumROIs(1,file) = size(varargin{file}.MedianDistanceResponse,1);
end

maxDist = max(DistanceCovered);
totalROIs = sum(NumROIs);

AllPolyMat = nan(length(varargin), maxDist);

for file = 1:length(varargin)
    BoutonResponse(1,file) = nanmean(cell2mat(varargin{file}.BoutonResponse));
    medianPolyresponse = nanmean(varargin{file}.MedianDistanceResponse,1);
    AllPolyMat(file, find(medianPolyresponse)) = medianPolyresponse;
end

figure; plot(0:size(AllPolyMat,2)-1,AllPolyMat')
hold on; plot(0:size(AllPolyMat,2)-1,nanmean(AllPolyMat), 'k', 'linewidth', 2)
plot(0,nanmean(BoutonResponse), 'or', 'MarkerFaceColor', 'r')

mdlfun = 'A*exp(b*-x)';
f1 = fit([1:10]', nanmean(AllPolyMat(:,1:10))', mdlfun);
F = @(x,xdata)x(1)*exp(-x(2)*xdata) + x(3)*exp(-x(4)*xdata);
x0 = [f1.A, f1.b, 0.1 0];
xunc = lsqcurvefit(F,x0, 1:10, nanmean(AllPolyMat(:,1:10)));
plot(0:9, F(xunc,1:10), '--r', 'linewidth', 2)

RefinedPolyMat = cell(1,length(varargin));
RefinedPolyMat{1} = nan(1,maxDist);

for file = 1:length(varargin)
    for bouton = 1:length(varargin{file}.EventAmp)
        largerresponses = varargin{file}.EventAmp{bouton}>0.5;
        FilteredBoutonResponses{file} = nanmean(varargin{file}.BoutonResponse{bouton}(largerresponses))
        placefiller = nan(sum(largerresponses),maxDist-size(varargin{file}.DistanceResponse{bouton},2));
        RefinedPolyMat{file} = [RefinedPolyMat{file}; [varargin{file}.DistanceResponse{bouton}(largerresponses, :), placefiller]];
    end
end

figure; hold on; 

for file = 1:length(varargin)
    medianbyfile = cellfun(@nanmean, RefinedPolyMat, 'uni', false);
    plot(medianbyfile{file});
end

All = nanmean(vertcat(medianbyfile{:}),1);
plot(0:length(All)-1, All, 'k', 'linewidth', 2)
f2 = fit([1:10]', All(1:10)', mdlfun); %%% Initialize parameters for the single exponential component with a single exp fit;
x0 = [f2.A, f2.b, 0.1 0];
xunc2 = lsqcurvefit(F,x0, 1:10, All(1:10));  %%% Follow up with a double exponential fit, which seems to fit the data better;
plot(0:9, F(xunc2,1:10), '--r', 'linewidth', 2)